{"version":3,"sources":["../../../../src/streaming/ManifestUpdater.js"],"names":[],"mappings":"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","file":"ManifestUpdater.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport EventBus from '../core/EventBus';\nimport Events from '../core/events/Events';\nimport FactoryMaker from '../core/FactoryMaker';\nimport Debug from '../core/Debug';\n\nfunction ManifestUpdater() {\n\n    let context = this.context;\n    let log = Debug(context).getInstance().log;\n    let eventBus = EventBus(context).getInstance();\n\n    let instance,\n        refreshDelay,\n        refreshTimer,\n        isStopped,\n        isUpdating,\n        manifestLoader,\n        manifestModel,\n        dashManifestModel;\n\n    function setConfig(config) {\n        if (!config) return;\n\n        if (config.manifestModel) {\n            manifestModel = config.manifestModel;\n        }\n        if (config.dashManifestModel) {\n            dashManifestModel = config.dashManifestModel;\n        }\n    }\n\n    function initialize(loader) {\n        manifestLoader = loader;\n        refreshDelay = NaN;\n        refreshTimer = null;\n        isUpdating = false;\n        isStopped = true;\n\n        eventBus.on(Events.STREAMS_COMPOSED, onStreamsComposed, this);\n        eventBus.on(Events.PLAYBACK_STARTED, onPlaybackStarted, this);\n        eventBus.on(Events.PLAYBACK_PAUSED, onPlaybackPaused, this);\n        eventBus.on(Events.INTERNAL_MANIFEST_LOADED, onManifestLoaded, this);\n    }\n\n    function setManifest(manifest) {\n        update(manifest);\n    }\n\n    function getManifestLoader() {\n        return manifestLoader;\n    }\n\n    function reset() {\n        eventBus.off(Events.PLAYBACK_STARTED, onPlaybackStarted, this);\n        eventBus.off(Events.PLAYBACK_PAUSED, onPlaybackPaused, this);\n        eventBus.off(Events.STREAMS_COMPOSED, onStreamsComposed, this);\n        eventBus.off(Events.INTERNAL_MANIFEST_LOADED, onManifestLoaded, this);\n\n        isStopped = true;\n        isUpdating = false;\n        clear();\n        refreshDelay = NaN;\n    }\n\n    function clear() {\n        if (refreshTimer !== null) {\n            clearInterval(refreshTimer);\n            refreshTimer = null;\n        }\n    }\n\n    function startManifestRefreshTimer() {\n        clear();\n        if (!isNaN(refreshDelay)) {\n            log('Refresh manifest in ' + refreshDelay + ' seconds.');\n            refreshTimer = setTimeout(onRefreshTimer, Math.min(refreshDelay * 1000, Math.pow(2, 31) - 1), this);\n        }\n    }\n\n    function update(manifest) {\n        var delay,\n            timeSinceLastUpdate;\n\n        var date = new Date();\n\n        manifestModel.setValue(manifest);\n        log('Manifest has been refreshed at ' + date + '[' + date.getTime() / 1000 + '] ');\n\n        delay = dashManifestModel.getRefreshDelay(manifest);\n        timeSinceLastUpdate = (new Date().getTime() - manifest.loadedTime.getTime()) / 1000;\n        refreshDelay = Math.max(delay - timeSinceLastUpdate, 0);\n\n        eventBus.trigger(Events.MANIFEST_UPDATED, {manifest: manifest});\n\n        if (!isStopped) {\n            startManifestRefreshTimer();\n        }\n    }\n\n    function onRefreshTimer() {\n        var manifest,\n            url;\n\n        if (isStopped || isUpdating) return;\n\n        isUpdating = true;\n        manifest = manifestModel.getValue();\n        url = manifest.url;\n\n        const location = dashManifestModel.getLocation(manifest);\n        if (location) {\n            url = location;\n        }\n\n        //log(\"Refresh manifest @ \" + url);\n\n        manifestLoader.load(url);\n    }\n\n    function onManifestLoaded(e) {\n        if (!e.error) {\n            update(e.manifest);\n        }\n    }\n\n    function onPlaybackStarted (/*e*/) {\n        isStopped = false;\n        startManifestRefreshTimer();\n    }\n\n    function onPlaybackPaused(/*e*/) {\n        isStopped = true;\n        clear();\n    }\n\n    function onStreamsComposed(/*e*/) {\n        // When streams are ready we can consider manifest update completed. Resolve the update promise.\n        isUpdating = false;\n    }\n\n    instance = {\n        initialize: initialize,\n        setManifest: setManifest,\n        getManifestLoader: getManifestLoader,\n        setConfig: setConfig,\n        reset: reset\n    };\n\n    return instance;\n}\nManifestUpdater.__dashjs_factory_name = 'ManifestUpdater';\nexport default FactoryMaker.getSingletonFactory(ManifestUpdater);\n"]}